What is ES6?
ES6 stands for ECMAScript 6.
ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, 
it was published in 2015, and is also known as ECMAScript 2015.

The new features like:
Classes
Arrow Functions
Variables (let, const, var)
Array Methods like .map()
Destructuring
Modules
Ternary Operator
Spread Operator
____________________________________________________________________________________________________________________

React ES6 Classes:-
ES6 introduced classes.
class is a type of function, but instead of using the keyword function to initiate it,
we use the keyword class, and the properties are assigned inside a constructor() method.

A simple class constructor:
class Car {
  constructor(name) {
    this.brand = name;
  }}

Notice the case of the class name. We have begun the name, "Car", with an uppercase character. 
This is a standard naming convention for classes.

Now you can create objects using the Car class:

Example:
Create an object called "mycar" based on the Car class:
class Car {
  constructor(name) {
    this.brand = name;
  }}
const mycar = new Car("Ford");

Note: The constructor function is called automatically when the object is initialized.
_______________________________________________________________________________________________________________________

JavaScript Class Inheritance:-
  
Class Inheritance:
To create a class inheritance, use the extends keyword.
A class created with a class inheritance inherits all the methods from another class:

Example:
  class Car {
  constructor(brand) {
    this.carname = brand;
  }
  present() {
    return 'I have a ' + this.carname;
  }}
class Model extends Car {
  constructor(brand, mod) {
    super(brand);
    this.model = mod;
  }
  show() {
    return this.present() + ', it is a ' + this.model;
  }}
let myCar = new Model("Ford", "Mustang");
document.getElementById("demo").innerHTML = myCar.show();


The super() method refers to the parent class.
By calling the super() method in the constructor method,
we call the parent's constructor method and get access to the parent's properties and methods.

***Inheritance is useful for code reusability: reuse properties and methods of an existing class when you create a new class.
































